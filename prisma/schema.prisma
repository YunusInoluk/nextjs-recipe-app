
datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  EDITOR
}
model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  username  String   
  image     String?
  email     String
  emailVerified DateTime?
  password  String?
  role      UserRole  @default(USER)
  recipes   Recipe[] @relation("UserRecipies")
  comments  Comment[] @relation("UserComments")
  favorites String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts Account[]
  sessions Session[]

  @@unique([email])
}

model Account {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  type    String
  provider  String
  providerAccountId String
  refresh_token String?
  access_token  String?
  expires_at  Int?
  token_type  String?
  scope   String?
  id_token  String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider,providerAccountId])
}

model Session {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  session_token String @unique
  userId String @db.ObjectId
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model VerificationToken {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  idendifier String
  token String @unique
  expires DateTime

  @@unique([idendifier, token])

}

model Recipe {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  ingredients String[]
  instructions String
  author      User?  @relation("UserRecipies", fields: [authorId], references: [id])
  authorId    String @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String? @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id]) 
  comments    Comment[] @relation("RecipeComment")
}


model Category {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  recipes Recipe[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  author  User     @relation("UserComments", fields: [authorId], references: [id])
  authorId String @db.ObjectId
  recipe  Recipe   @relation("RecipeComment",fields: [recipeId], references: [id])
  recipeId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

